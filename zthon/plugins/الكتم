import asyncio
import contextlib

from telethon.errors import (
    BadRequestError,
    ImageProcessFailedError,
    PhotoCropSizeSmallError,
)
from telethon.errors.rpcerrorlist import UserIdInvalidError
from telethon.tl.functions.channels import (
    EditAdminRequest,
    EditBannedRequest,
    EditPhotoRequest,
)
from telethon.tl.types import (
    ChatAdminRights,
    ChatBannedRights,
    InputChatPhotoEmpty,
    MessageMediaPhoto,
)
from telethon.utils import get_display_name

from sbb_b import sbb_b

from ..core.data import _sudousers_list
from ..core.logger import logging
from ..core.managers import edit_delete, edit_or_reply
from ..helpers import media_type
from ..helpers.utils import _format, get_user_from_event
from ..sql_helper.mute_sql import is_muted, mute, unmute
from . import BOTLOG, BOTLOG_CHATID

BANNED_RIGHTS = ChatBannedRights(
    until_date=None,
    view_messages=True,
    send_messages=True,
    send_media=True,
    send_stickers=True,
    send_gifs=True,
    send_games=True,
    send_inline=True,
    embed_links=True,
)

UNBAN_RIGHTS = ChatBannedRights(
    until_date=None,
    send_messages=None,
    send_media=None,
    send_stickers=None,
    send_gifs=None,
    send_games=None,
    send_inline=None,
    embed_links=None,
)

LOGS = logging.getLogger(__name__)
MUTE_RIGHTS = ChatBannedRights(until_date=None, send_messages=True)
UNMUTE_RIGHTS = ChatBannedRights(until_date=None, send_messages=False)


@sbb_b.ar_cmd(
    pattern="حظر(?:\s|$)([\s\S]*)",
    groups_only=True,
    require_admin=True,
)
async def _ban_person(event):
    user, reason = await get_user_from_event(event)
    if not user:
        return
    if user.id == 6007372789:
        return await edit_delete(event, "**- لا يمكنك حظر مطور السورس ادرو****")
    if user.id == event.client.uid:
        return await edit_delete(event, "**- عزيزي المستخدم لا يمكنك حظر نفسك**")
    jmthonevent = await edit_or_reply(event, "- تم حظر المستخدم من الدردشة بنجاح")
    try:
        await event.client(EditBannedRequest(event.chat_id, user.id, BANNED_RIGHTS))
    except BadRequestError:
        return await jmthonevent.edit(NO_PERM)
    reply = await event.get_reply_message()
    if reason:
        await jmthonevent.edit(
            f"المستخدم :{_format.mentionuser(user.first_name ,user.id)}\nتم حظر المستخدم****\n**السبب : **`{reason}`"
        )
    else:
        await jmthonevent.edit(
            f"المستخدم {_format.mentionuser(user.first_name ,user.id)} \nتم حظر المستخدم****"
        )
    if BOTLOG:
        if reason:
            await event.client.send_message(
                BOTLOG_CHATID,
                f"الحظر \
                \nالمستخدم: [{user.first_name}](tg://user?id={user.id})\
                \nالدردشة: {get_display_name(await event.get_chat())}(`{event.chat_id}`)\
                \nالسبب: {reason}",
            )
        else:
            await event.client.send_message(
                BOTLOG_CHATID,
                f"الحظر\
                \nالمستخدم: [{user.first_name}](tg://user?id={user.id})\
                \nالدردشة: {get_display_name(await event.get_chat())}(`{event.chat_id}`)",
            )
        try:
            if reply:
                await reply.forward_to(BOTLOG_CHATID)
                await reply.delete()
        except BadRequestError:
            return await jmthonevent.edit(
                "**- ليس لدي بعض الصلاحيات لكنه ما زال محظور**"
            )


@sbb_b.ar_cmd(
    pattern="الغاء حظر(?:\s|$)([\s\S]*)",
    groups_only=True,
    require_admin=True,
)
async def nothanos(event):
    user, _ = await get_user_from_event(event)
    if not user:
        return
    jmthonevent = await edit_or_reply(event, "**- جار الغاء حظر المستخدم**")
    try:
        await event.client(EditBannedRequest(event.chat_id, user.id, UNBAN_RIGHTS))
        await jmthonevent.edit(
            f"المستخدم :{_format.mentionuser(user.first_name ,user.id)} تم الغاء حظره بنجاح"
        )
        if BOTLOG:
            await event.client.send_message(
                BOTLOG_CHATID,
                "الغاء حظر\n"
                f"المستخدم: [{user.first_name}](tg://user?id={user.id})\n"
                f"الدردشة: {get_display_name(await event.get_chat())}(`{event.chat_id}`)",
            )
    except UserIdInvalidError:
        await jmthonevent.edit("- لقد حدث خطأ اثناء الغاء حظر المستخدم")
    except Exception as e:
        await jmthonevent.edit(f"**خطأ :**\n`{e}`")


@sbb_b.ar_cmd(incoming=True)
async def watcher(event):
    if is_muted(event.sender_id, event.chat_id):
        try:
            await event.delete()
        except Exception as e:
            LOGS.info(str(e))


@sbb_b.ar_cmd(pattern="كتم(?:\s|$)([\s\S]*)")
async def startgmute(event):
    if event.is_private:
        await event.edit("**⌔∮ ربما ستحدث بعض الاخطاء و المشاكل**")
        await asyncio.sleep(2)
        userid = event.chat_id
        reason = event.pattern_match.group(1)
    else:
        user, reason = await get_user_from_event(event)
        if not user:
            return
        if user.id == sbb_b.uid:
            return await edit_or_reply(event, "**⌔∮ عذرا لا يمكنني كتم نفسي **")
        userid = user.id
    try:
        user = await event.client.get_entity(userid)
    except Exception:
        return await edit_or_reply(
            event, "**⌔∮ لا يمكنني الحصول على معلومات من هذا المستخدم**"
        )
    if is_muted(userid, "gmute"):
        return await edit_or_reply(
            event,
            f"**⪼ المستخدم**: {_format.mentionuser(user.first_name ,user.id)}\n**مكتوم بالاصل**",
        )
    try:
        mute(userid, "gmute")
    except Exception as e:
        await edit_or_reply(event, f"**خطأ**\n`{e}`")
    else:
        if reason:
            await edit_or_reply(
                event,
                f"**⪼ المستخدم:  {_format.mentionuser(user.first_name ,user.id)}\nتم كتمه بنجاح\nالسبب: {reason}**",
            )
        else:
            await edit_or_reply(
                event,
                f"**⪼ المستخدم: {_format.mentionuser(user.first_name ,user.id)}\nتم كتمه بنجاح**",
            )
    if BOTLOG:
        reply = await event.get_reply_message()
        if reason:
            await event.client.send_message(
                BOTLOG_CHATID,
                "#الكتم\n"
                f"**المستخدم :** {_format.mentionuser(user.first_name ,user.id)} \n"
                f"**السبب :** `{reason}`",
            )
        else:
            await event.client.send_message(
                BOTLOG_CHATID,
                "#الكتم\n"
                f"**المستخدم :** {_format.mentionuser(user.first_name ,user.id)} \n",
            )
        if reply:
            await reply.forward_to(BOTLOG_CHATID)


@sbb_b.ar_cmd(pattern="الغاء كتم(?:\s|$)([\s\S]*)")
async def endgmute(event):
    if event.is_private:
        await event.edit("**⌔∮ قد تحدث بعض الاخطاء و المشاكل**")
        await asyncio.sleep(2)
        userid = event.chat_id
        reason = event.pattern_match.group(1)
    else:
        user, reason = await get_user_from_event(event)
        if not user:
            return
        if user.id == sbb_b.uid:
            return await edit_or_reply(event, "⌔∮ عذرا لا يمكنني كتم نفسي اصلا")
        userid = user.id
    try:
        user = await event.client.get_entity(userid)
    except Exception:
        return await edit_or_reply(
            event, "**⌔∮ لا يمكنني الحصول على معلومات من هذا المستخدم**"
        )
    if not is_muted(userid, "gmute"):
        return await edit_or_reply(
            event,
            f"**⪼ المستخدم:  {_format.mentionuser(user.first_name ,user.id)}\nغير مكتوم اصلا** ",
        )
    try:
        unmute(userid, "gmute")
    except Exception as e:
        await edit_or_reply(event, f"**خطأ**\n`{e}`")
    else:
        if reason:
            await edit_or_reply(
                event,
                f"**⪼ المستخدم:  {_format.mentionuser(user.first_name ,user.id)}\nتم الغاء كتمه بنجاح ✓\nالسبب :{reason}**",
            )
        else:
            await edit_or_reply(
                event,
                f"**⪼ المستخدم:  {_format.mentionuser(user.first_name ,user.id)}\nتم الغاء كتمه بنجاح ✓**",
            )
    if BOTLOG:
        if reason:
            await event.client.send_message(
                BOTLOG_CHATID,
                "#الغاء_كتم\n"
                f"**المستخدم :** {_format.mentionuser(user.first_name ,user.id)} \n"
                f"**السبب :** `{reason}`",
            )
        else:
            await event.client.send_message(
                BOTLOG_CHATID,
                "#الغاء_كتم\n"
                f"**المستخدم :** {_format.mentionuser(user.first_name ,user.id)} \n",
            )


@sbb_b.ar_cmd(incoming=True)
async def watcher(event):
    if is_muted(event.sender_id, "gmute"):
        await event.delete()


@sbb_b.ar_cmd(
    pattern="طرد(?:\s|$)([\s\S]*)",
    groups_only=True,
    require_admin=True,
)
async def kick(event):
    user, reason = await get_user_from_event(event)
    if not user:
        return
    jmthonevent = await edit_or_reply(event, "**- جار طرد المستخدم من الدردشة**")
    try:
        await event.client.kick_participant(event.chat_id, user.id)
    except Exception as e:
        return await jmthonevent.edit(f"{NO_PERM}\n{e}")
    if reason:
        await jmthonevent.edit(
            f"تم طرد [{user.first_name}](tg://user?id={user.id})\nالسبب: {reason}"
        )
    else:
        await jmthonevent.edit(f"تم طرد[{user.first_name}](tg://user?id={user.id})")
    if BOTLOG:
        await event.client.send_message(
            BOTLOG_CHATID,
            "الطرد\n"
            f"المستخدم: [{user.first_name}](tg://user?id={user.id})\n"
            f"الدردشة: {get_display_name(await event.get_chat())}(`{event.chat_id}`)\n",
        )

